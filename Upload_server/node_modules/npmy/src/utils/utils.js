"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs = require("fs");
const globModule = require("glob");
const rimraf = require("rimraf");
const childProcess = require("child_process");
const cli_spinner_1 = require("cli-spinner");
const os_1 = require("os");
exports.exec = promisify(childProcess.exec);
exports.glob = promisify(globModule);
exports.mkdir = promisify(fs.mkdir);
exports.mkdirSync = fs.mkdirSync;
exports.symlink = promisify(fs.symlink);
exports.existsSync = fs.existsSync;
exports.rmdir = promisify(rimraf);
exports.rmdirSync = (dir) => rimraf.sync(dir);
exports.readFile = promisify(fs.readFile);
exports.readFileSync = fs.readFileSync;
exports.writeFileSync = fs.writeFileSync;
exports.unlinkSync = fs.unlinkSync;
exports.writeFile = promisify(fs.writeFile);
exports.readDir = promisify(fs.readdir);
exports.readDirSync = fs.readdirSync;
const pathId = process.cwd().replace(/[^a-z0-9_-]/ig, '_');
function tmpdir() {
    return `${os_1.tmpdir()}/${pathId}`;
}
exports.tmpdir = tmpdir;
function promisify(fn, context = null) {
    return function promisifyWrapper(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                fn.call(context, ...[...args, (err, ...results) => {
                        err
                            ? reject(err)
                            : resolve(results.length ? results[0] : results);
                    }]);
            });
        });
    };
}
exports.promisify = promisify;
function createSpinner(text, autoStart = false) {
    const spinner = new cli_spinner_1.Spinner(text);
    spinner.setSpinnerString(18);
    autoStart && spinner.start();
    return spinner;
}
exports.createSpinner = createSpinner;
function checkNodeModulesPath(path) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!exports.existsSync(path)) {
            const [rootPath, relativePath] = path.split('node_modules');
            const segments = relativePath.split(path_1.sep);
            for (let i = 0; i < segments.length; i++) {
                const checkPath = path_1.join(rootPath, 'node_modules', ...segments.slice(0, i));
                if (!exports.existsSync(checkPath)) {
                    yield exports.mkdir(checkPath);
                }
            }
        }
    });
}
exports.checkNodeModulesPath = checkNodeModulesPath;
function pause(ms) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise(resolve => setTimeout(resolve, ms));
    });
}
exports.pause = pause;
